# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mongo:
        image: mongo
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
          MONGO_INITDB_DATABASE: test
        ports:
          - 27017:27017
        options:  >-
          --health-cmd "echo 'db.runCommand("ping").ok' | mongosh --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: 'root'
          MYSQL_DATABASE: 'test'
          MYSQL_USER: 'test'
          MYSQL_PASSWORD: 'test'
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      postgres:
        image: postgres:9.6
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          MAVEN_OPTS: "-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
          TEST_MYSQL_URL: "jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&useSSL=false&allowPublicKeyRetrieval=true"
          TEST_MYSQL_USER: test
          TEST_MYSQL_PWD: test
          TEST_POSTGRESQL_URL: "jdbc:postgresql://localhost:5432/test?ssl=false"
          TEST_POSTGRESQL_USER: test
          TEST_POSTGRESQL_PWD: test
          TEST_REDIS_URI: "redis://localhost:6379"
          TEST_MONGO_URI: "mongodb://test:test@localhost:27017"
        run: mvn -B package -DskipTests=false --file pom.xml -U
# todo setup test service https://stackoverflow.com/questions/65914287/github-action-with-mysql-test-database
#      - name: Test with Maven
#        run: mvn -B test -DskipTests=false
#      - name: Upload to Codecov
#        uses: codecov/codecov-action@v1
#        with:
#          #token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
#          #files: ./coverage1.xml,./coverage2.xml # optional
#          flags: unittests # optional
#          name: codecov-umbrella # optional
#          fail_ci_if_error: true # optional (default = false)
#          verbose: true # optional (default = false)
